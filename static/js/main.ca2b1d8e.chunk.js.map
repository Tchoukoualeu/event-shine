{"version":3,"sources":["redux/reducers/formValid.js","utils/validation.js","components/FormField.js","utils/useValid.js","api/api.js","redux/reducers/formData.js","components/FormDatePicker.js","components/Form.js","components/BackdropLoader.js","components/FormSnackBar/FormSnackBar.js","components/FormSnackBar/ErrorSnackBar.js","components/FormSnackBar/SuccessSnackBar.js","App.js","redux/store.js","index.js"],"names":["initialState","firstName","onValidate","valid","text","lastName","email","formValidSlice","createSlice","name","reducers","setValid","reducer","state","action","payload","field","value","indexOf","push","prepare","resetValid","actions","validation","isValidDate","isDate","isEmptyField","isEmpty","ignore_whitespace","required","undefined","isEmail","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","FormField","id","label","onChange","placeholder","classes","dispatch","useDispatch","fieldValue","useSelector","form","data","values","validValue","length","join","useValid","isValidate","isInvalid","TextField","inputProps","className","error","helperText","fullWidth","onBlur","forEach","validateName","variant","API","axios","then","res","status","catch","Error","FormStatuses","emptyValues","date","Date","getTime","saveData","createAsyncThunk","a","format","toISOString","formDataSlice","saveField","resetForm","resetStatus","extraReducers","pending","fulfilled","rejected","FormDatePicker","dateValue","utils","DateFnsUtils","newDate","maxWidth","margin","spacing","Form","handleChange","event","target","noValidate","autoComplete","Box","display","justifyContent","Button","size","onClick","color","Object","keys","every","backdrop","zIndex","drawer","BackdropLoader","open","Backdrop","CircularProgress","width","marginTop","FormSnackBar","isOpen","severity","message","onClose","Snackbar","autoHideDuration","elevation","ErrorSnackBar","SuccessSnackBar","App","closeErrorBar","Container","CssBaseline","flexDirection","alignItems","pt","Typography","gutterBottom","store","configureStore","combineReducers","formDataReducer","formValidReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca2b1d8e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  firstName: {\r\n    onValidate: ['required'],\r\n    valid: true,\r\n    text: []\r\n  },\r\n  lastName: {\r\n    onValidate: ['required'],\r\n    valid: true,\r\n    text: []\r\n  },\r\n  email: {\r\n    onValidate: ['required', 'email'],\r\n    valid: true,\r\n    text: []\r\n  }\r\n};\r\n\r\nconst formValidSlice = createSlice({\r\n  name: 'valid',\r\n  initialState,\r\n  reducers: {\r\n    setValid: {\r\n      reducer(state, action) {\r\n        const { field, value } = action.payload;\r\n        state[field].valid = value.valid;\r\n        if (value.valid) {\r\n          state[field].text = [];\r\n        } else if (state[field].text.indexOf(value.text) === -1) {\r\n          state[field].text.push(value.text);\r\n        }\r\n      },\r\n      prepare(field, value) {\r\n        return {\r\n          payload: { field, value }\r\n        };\r\n      }\r\n    },\r\n    resetValid() {\r\n      return initialState;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setValid, resetValid } = formValidSlice.actions;\r\n\r\nexport default formValidSlice.reducer;\r\n","import isDate from 'validator/lib/isDate';\r\nimport isEmpty from 'validator/lib/isEmpty';\r\nimport isEmail from 'validator/lib/isEmail';\r\n\r\nconst validation = {\r\n  isValidDate(value) {\r\n    return isDate(value);\r\n  },\r\n  isEmptyField(value) {\r\n    return isEmpty(value, { ignore_whitespace: true });\r\n  },\r\n  required(value) {\r\n    const valid = !validation.isEmptyField(value);\r\n    return {\r\n      valid,\r\n      ...{\r\n        text: valid ? undefined : 'This field is required.'\r\n      }\r\n    };\r\n  },\r\n  email(value) {\r\n    const valid = isEmail(value);\r\n    return {\r\n      valid,\r\n      ...{\r\n        text: valid ? undefined : 'The email is invalid.'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport default validation;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setValid } from '../redux/reducers/formValid';\r\nimport { useValid } from '../utils/useValid';\r\nimport validation   from '../utils/validation';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField      from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n/**\r\n * Connected to the store TextField with a validation check of a value performed when a user's focus leaves it.\r\n * The component is controlled, its value is stored in the Redux store.\r\n * @param {Object}   props\r\n * @param {string}   props.id            - Id of the field, it should be the same in the store (for ex., state.form.data.values['name']).\r\n * @param {number}   props.label         - Label of the field.\r\n * @param {Function} props.onChange      - On change handler, it saves field's value into the store.\r\n * @param {string}   [props.placeholder] - Placeholder of the field, it is false by default, and if it is so, label's value is used instead.\r\n */\r\nconst FormField = ({\r\n  id,\r\n  label,\r\n  onChange,\r\n  placeholder = false\r\n}) => {\r\n  const classes    = useStyles();\r\n  const dispatch   = useDispatch();\r\n  const fieldValue = useSelector((state) => state.form.data.values[id]);\r\n  const validValue = useValid(id);\r\n  const isValidate = !!validValue;\r\n  const isInvalid  = isValidate && !validValue.valid;\r\n\r\n  const onBlur = () => {\r\n    if (isValidate) {\r\n      validValue.onValidate.forEach((validateName) => {\r\n        dispatch(setValid(id, validation[validateName](fieldValue)));\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      inputProps={{\r\n        className: classes.root\r\n      }}\r\n      error={isInvalid}\r\n      helperText={isInvalid && validValue.text}\r\n      fullWidth\r\n      id={id}\r\n      label={label}\r\n      onBlur={onBlur}\r\n      onChange={onChange}\r\n      placeholder={placeholder || label}\r\n      required={isValidate}\r\n      value={fieldValue}\r\n      variant='outlined'\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nexport const useValid = (id) => useSelector((state) => {\r\n  return (\r\n    typeof state.form.valid[id] === 'undefined' ?\r\n      undefined\r\n    : {\r\n      ...state.form.valid[id],\r\n      text: (\r\n        state.form.valid[id].text.length ?\r\n          state.form.valid[id].text.join(' ')\r\n        : ''\r\n      )\r\n    }\r\n  );\r\n});\r\n","import * as axios from 'axios';\r\n\r\nexport const API = {\r\n  saveForm(data) {\r\n    return axios\r\n      .post('https://event-backend-nodejs.glitch.me/save', { ...data })\r\n      .then(res => res.status)\r\n      .catch(error => {\r\n        throw new Error(error);\r\n      });\r\n  }\r\n};\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { format } from 'date-fns';\r\nimport { API } from '../../api/api';\r\n\r\nexport const FormStatuses = {\r\n  IDLE: 'IDLE',\r\n  SAVING: 'SAVING',\r\n  ERROR: 'ERROR',\r\n  SUCCESS: 'SUCCESS'\r\n};\r\n\r\nconst emptyValues = {\r\n  firstName: '',\r\n  lastName:  '',\r\n  email:     '',\r\n  date:      new Date().getTime()\r\n};\r\nconst initialState = {\r\n  values: emptyValues,\r\n  status: FormStatuses.IDLE\r\n};\r\n\r\nexport const saveData = createAsyncThunk('status/saveData', async (data) => {\r\n  return await API.saveForm({\r\n    ...data,\r\n    date: new Date(format(new Date(data.date), 'yyyy-MM-dd')).toISOString()\r\n  });\r\n});\r\n\r\nconst formDataSlice = createSlice({\r\n  name: 'data',\r\n  initialState,\r\n  reducers: {\r\n    saveField: {\r\n      reducer(state, action) {\r\n        const { field, value } = action.payload;\r\n        state.values[field] = value;\r\n      },\r\n      prepare(field, value) {\r\n        return {\r\n          payload: { field, value }\r\n        };\r\n      }\r\n    },\r\n    resetForm(state) {\r\n      state.values = emptyValues;\r\n    },\r\n    resetStatus(state) {\r\n      state.status = FormStatuses.IDLE;\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [saveData.pending]: (state) => {\r\n      state.status = FormStatuses.SAVING;\r\n    },\r\n    [saveData.fulfilled]: (state) => {\r\n      state.values = emptyValues;\r\n      state.status = FormStatuses.SUCCESS;\r\n    },\r\n    [saveData.rejected]: (state) => {\r\n      state.status = FormStatuses.ERROR;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { saveField, resetForm, resetStatus } = formDataSlice.actions;\r\n\r\nexport default formDataSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { saveField } from '../redux/reducers/formData';\r\nimport validation    from '../utils/validation';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DateFnsUtils   from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n/**\r\n * Connected to the store DatePicker with an inner change handler, that puts current date if user tries to enter something manually.\r\n * The component is controlled, its value is stored in the Redux store in the state.form.data.values['id'], so its id is 'date'.\r\n */\r\nconst FormDatePicker = () => {\r\n  const classes   = useStyles();\r\n  const dispatch  = useDispatch();\r\n  const dateValue = useSelector((state) => state.form.data.values.date);\r\n\r\n  const handleDateChange = (date) => {\r\n    const newDate = validation.isValidDate(date) ? new Date(date).getTime() : new Date().getTime();\r\n    dispatch(saveField('date', newDate));\r\n  };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <KeyboardDatePicker\r\n        fullWidth\r\n        inputProps={{\r\n          className: classes.root\r\n        }}\r\n        variant='inline'\r\n        format='dd/MM/yyyy'\r\n        id='date'\r\n        label='Date'\r\n        value={dateValue}\r\n        onChange={handleDateChange}\r\n        required={true}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default FormDatePicker;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport FormField      from './FormField';\r\nimport FormDatePicker from './FormDatePicker';\r\nimport { saveField, resetForm, saveData } from '../redux/reducers/formData';\r\nimport { resetValid, setValid } from '../redux/reducers/formValid';\r\nimport validation from '../utils/validation';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box            from '@material-ui/core/Box';\r\nimport Button         from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '500px',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    }\r\n  },\r\n  date: {\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n/**\r\n * A Form with three inputs, a datepicker and two buttons to reset or submit the Form.\r\n */\r\nconst Form = () => {\r\n  const classes = useStyles();\r\n  const { data: { values }, valid } = useSelector((state) => state.form);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (event) => {\r\n    dispatch(saveField(event.target.id, event.target.value));\r\n  };\r\n  const onReset = () => {\r\n    dispatch(resetForm());\r\n    dispatch(resetValid());\r\n  };\r\n  const onSubmit = () => {\r\n    Object.keys(values).forEach((field) => {\r\n      if (typeof valid[field] !== 'undefined') {\r\n        valid[field].onValidate.forEach((validateName) => {\r\n          dispatch(setValid(field, validation[validateName](values[field])));\r\n        });\r\n      }\r\n    });\r\n    if (\r\n      Object.keys(valid).every((field) => {\r\n        return valid[field].valid && !validation.isEmptyField(values[field]);\r\n      })\r\n    ) {\r\n      dispatch(saveData(values));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete='off'>\r\n      <FormField\r\n        id='firstName'\r\n        label='First Name'\r\n        onChange={handleChange}\r\n      />\r\n      <FormField\r\n        id='lastName'\r\n        label='Last Name'\r\n        onChange={handleChange}\r\n      />\r\n      <FormField\r\n        id='email'\r\n        label='Email'\r\n        onChange={handleChange}\r\n      />\r\n      <FormDatePicker />\r\n      <Box display='flex' justifyContent='space-evenly'>\r\n        <Button\r\n          variant='contained'\r\n          size='large'\r\n          onClick={onReset}\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          variant='contained'\r\n          size='large'\r\n          color='primary'\r\n          onClick={onSubmit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\n/**\r\n * BackdropLoader adds a dimmed layer over the screen and a circular progress loader.\r\n * @param {Object}  props\r\n * @param {boolean} props.open - Inicates whether to show the Backdrop or not.\r\n */\r\nconst BackdropLoader = ({ open }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={open}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default BackdropLoader;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\n/**\r\n * FormSnackBar shows an alert with a message and is closed on click on the close button or upon 5 seconds timeout.\r\n * @param {Object}            props\r\n * @param {boolean}           props.isOpen   - Inicates whether to show the FormSnackBar or not.\r\n * @param {'success'|'error'} props.severity - A type of the alert.\r\n * @param {string}            props.message  - A message to show in the alert.\r\n * @param {Function}          props.onClose  - A callback that is called when the alert is closed either with close button or upon 5 seconds timeout.\r\n */\r\nconst FormSnackBar = ({ isOpen, severity, message, onClose }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={isOpen} autoHideDuration={5000} onClose={onClose}>\r\n        <MuiAlert\r\n          elevation={6}\r\n          variant='filled'\r\n          severity={severity}\r\n          onClose={onClose}\r\n        >\r\n          {message}\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormSnackBar;\r\n","import React from 'react';\r\nimport FormSnackBar from './FormSnackBar';\r\n\r\n/**\r\n * A wrapper of the FormSnackBar component for an alert of error.\r\n * @param {Object}   props\r\n * @param {boolean}  props.isOpen  - Inicates whether to show the FormSnackBar or not.\r\n * @param {Function} props.onClose - A callback that resets the form status in the store and is called in the FormSnackBar for its closing.\r\n */\r\nexport default function ErrorSnackBar({ isOpen, onClose }) {\r\n  return (\r\n    <FormSnackBar\r\n      isOpen={isOpen}\r\n      severity='error'\r\n      message='Something went wrong!'\r\n      onClose={onClose}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport FormSnackBar from './FormSnackBar';\r\n\r\n/**\r\n * A wrapper of the FormSnackBar component for an alert of success.\r\n * @param {Object}   props\r\n * @param {boolean}  props.isOpen  - Inicates whether to show the FormSnackBar or not.\r\n * @param {Function} props.onClose - A callback that resets the form status in the store and is called in the FormSnackBar for its closing.\r\n */\r\nexport default function SuccessSnackBar({ isOpen, onClose }) {\r\n  return (\r\n    <FormSnackBar\r\n      isOpen={isOpen}\r\n      severity='success'\r\n      message='The Event was successfully added!'\r\n      onClose={onClose}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Form from './components/Form';\r\nimport BackdropLoader from './components/BackdropLoader';\r\nimport ErrorSnackBar from './components/FormSnackBar/ErrorSnackBar';\r\nimport SuccessSnackBar from './components/FormSnackBar/SuccessSnackBar';\r\nimport { FormStatuses, resetStatus } from './redux/reducers/formData';\r\n\r\nimport Container   from '@material-ui/core/Container';\r\nimport Box         from '@material-ui/core/Box';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography  from '@material-ui/core/Typography';\r\n\r\nconst App = () => {\r\n  const status = useSelector((state) => state.form.data.status);\r\n  const dispatch = useDispatch();\r\n  const closeErrorBar = () => dispatch(resetStatus());\r\n\r\n  return (\r\n    <Container>\r\n      <CssBaseline />\r\n      <Box display='flex' flexDirection='column' alignItems='center' pt='15vh'>\r\n        <Typography variant='h3' gutterBottom={true}>\r\n          Event\r\n        </Typography>\r\n        <Form />\r\n      </Box>\r\n      <BackdropLoader open={status === FormStatuses.SAVING} />\r\n      <ErrorSnackBar isOpen={status === FormStatuses.ERROR} onClose={closeErrorBar} />\r\n      <SuccessSnackBar isOpen={status === FormStatuses.SUCCESS} onClose={closeErrorBar} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport formDataReducer  from './reducers/formData';\r\nimport formValidReducer from './reducers/formValid';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    form: combineReducers({\r\n      data: formDataReducer,\r\n      valid: formValidReducer\r\n    })\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}